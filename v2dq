-- Services
local TS = game:GetService("TweenService")
local RS = game:GetService("ReplicatedStorage")
local player = game.Players.LocalPlayer

-- Function to handle movement towards enemies and tween above them
local function moveToEnemy(enemyRoot)
    -- Ensure player has a character and HumanoidRootPart before proceeding
    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not root or not enemyRoot then return end  -- Exit early if critical parts are missing

    coroutine.wrap(function()
        while getgenv().autofarm and enemyRoot and enemyRoot.Parent and enemyRoot.Parent:FindFirstChild("Humanoid") and enemyRoot.Parent.Humanoid.Health > 0 do
            dodgeDanger(root)  -- Dodge dangerous parts

            -- Calculate the position above the enemy using the adjustable height
            local targetPos = enemyRoot.Position + Vector3.new(0, getgenv().aboveEnemyHeight, 0)  -- Adjust height using aboveEnemyHeight
            local tweenInfo = TweenInfo.new(getgenv().tweenDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)

            -- Ensure root and target position exist before tweening
            if root and targetPos then
                TS:Create(root, tweenInfo, {CFrame = CFrame.new(targetPos)}):Play()
            else
                return  -- Exit if root or targetPos is nil
            end
            wait(0.1)
        end
    end)()
end

-- Attack the enemy continuously
local function attackEnemy()
    local remote = RS:FindFirstChild("dataRemoteEvent")
    if remote then
        remote:FireServer({{["animationLength"] = 0, ["sentAt"] = tick()}, "C"})
    end
end

-- Fast dodging of nearby parts
local function dodgeDanger(root)
    if not root then return end  -- Exit if root is nil
    for _, part in pairs(workspace:GetChildren()) do
        if part:IsA("BasePart") and (root.Position - part.Position).Magnitude < getgenv().dodgeRange then
            local safePos = part.Position + (root.Position - part.Position).Unit * (part.Size.Magnitude / 2 + getgenv().extraSafeDistance)
            root.CFrame = CFrame.new(safePos)  -- Teleport to a safe position
        end
    end
end

-- Scan dungeon and attack all enemies
local function scanAndAttackEnemies()
    local dungeon = workspace:FindFirstChild("dungeon")
    if dungeon then
        for _, obj in pairs(dungeon:GetDescendants()) do
            local humanoid = obj:FindFirstChild("Humanoid")
            local root = obj:FindFirstChild("HumanoidRootPart")
            if humanoid and root and humanoid.Health > 0 then
                moveToEnemy(root)  -- Move to the enemy
                while humanoid.Health > 0 and getgenv().autofarm do
                    attackEnemy()
                    wait(getgenv().attackSpeed)  -- Control attack speed
                end
            end
        end
    end
end

-- Fire retry vote and start button every few seconds
local function retryAndStartLoop()
    while getgenv().autofarm do
        local retryRemote = RS:FindFirstChild("dataRemoteEvent")
        if retryRemote then
            retryRemote:FireServer({{["\3"] = "vote", ["vote"] = true}, ","})  -- Retry vote
        end
        local startRemote = RS.remotes and RS.remotes:FindFirstChild("changeStartValue")
        if startRemote then
            startRemote:FireServer()  -- Start button
        end
        wait(getgenv().retryInterval)
    end
end

-- Main autofarm loop
local function autofarmLoop()
    coroutine.wrap(retryAndStartLoop)()  -- Start retry loop
    while getgenv().autofarm do
        pcall(scanAndAttackEnemies)  -- Scan and attack enemies
        wait(0.1)  -- Short delay between scans
    end
end

-- Function to initialize the script after respawn
local function onCharacterAdded(character)
    -- Ensure HumanoidRootPart exists before starting
    character:WaitForChild("HumanoidRootPart")

    -- Start the autofarm loop
    autofarmLoop()
end

-- Start the autofarm immediately if the character is already loaded
if player.Character then
    onCharacterAdded(player.Character)
end

-- Connect to the CharacterAdded event to restart autofarm after death/respawn
player.CharacterAdded:Connect(onCharacterAdded)
