-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Variables to store character components
local humanoidRootPart, humanoid
local currentTween  -- Store the current tween for moving towards the target
local dodgingParts = {}  -- Store parts that require dodging

-- Function to initialize character components after respawn
local function initializeCharacter(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

-- Ensure the script continues after respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    initializeCharacter(character)
end)

-- Initialize character if already loaded
if LocalPlayer.Character then
    initializeCharacter(LocalPlayer.Character)
end

-- Stop current tween movement (used for stopping movement to the target)
local function stopTween()
    if currentTween then
        currentTween:Cancel()
        currentTween = nil  -- Clear the tween reference after stopping
    end
end

-- Function to calculate the dodge direction and optimal dodge distance
local function calculateSafeDodgeDirection()
    local totalDodgeVector = Vector3.new(0, 0, 0)
    local closestPartDistance = math.huge  -- Track the closest part
    local dodgeCount = 0

    -- Calculate dodge direction based on all parts within range
    for _, part in pairs(dodgingParts) do
        if part:IsDescendantOf(Workspace) then
            local distanceToPart = (part.Position - humanoidRootPart.Position).Magnitude

            -- If within the dodge range
            if distanceToPart <= getgenv().dodgeRange then
                if distanceToPart < closestPartDistance then
                    closestPartDistance = distanceToPart
                end

                -- Calculate 3D direction away from the part
                local dodgeDirection = (humanoidRootPart.Position - part.Position).Unit
                totalDodgeVector = totalDodgeVector + dodgeDirection
                dodgeCount = dodgeCount + 1
            end
        end
    end

    -- If dodging is necessary, return the average dodge direction and dynamic buffer
    if dodgeCount > 0 then
        local averageDodgeVector = totalDodgeVector.Unit
        -- Calculate the dodge distance to ensure it's small and safe
        local dodgeBuffer = getgenv().dodgeBaseBuffer + (dodgeCount * getgenv().dodgeDynamicBufferMultiplier)
        local dodgeDistance = math.min(closestPartDistance + dodgeBuffer, getgenv().maxDodgeDistance)  -- Limit the max dodge distance
        return averageDodgeVector, dodgeDistance
    end

    return nil, nil  -- No dodging needed
end

-- Function to handle teleporting the character to the safest dodge spot
local function prioritizeDodging()
    local dodgeDirection, dodgeDistance = calculateSafeDodgeDirection()

    if dodgeDirection then
        -- Calculate the dodge position based on the direction and distance
        local dodgePosition = humanoidRootPart.Position + dodgeDirection * dodgeDistance

        -- Teleport to the safe dodge spot (CFrame adjustment)
        humanoidRootPart.CFrame = CFrame.new(dodgePosition)

        -- Recheck if there are still parts nearby and dodge again if necessary
        for _, part in pairs(dodgingParts) do
            local distanceToPart = (part.Position - humanoidRootPart.Position).Magnitude
            if distanceToPart <= getgenv().dodgeRange then
                prioritizeDodging()  -- Recursively dodge if necessary
                break
            end
        end

        -- Efficiently clear dodged parts after successful dodge
        dodgingParts = {}
    end
end

-- Constantly check for dodging and ensure the player is always safe
local function constantlyCheckForDodging()
    while getgenv().autofarm do
        prioritizeDodging()
        wait(getgenv().dodgeCheckFrequency)  -- Frequent checks for dodging
    end
end

-- Monitor parts added to workspace and initiate dodging
Workspace.ChildAdded:Connect(function(newObject)
    if newObject:IsA("Part") then
        -- Add new part to the dodging list
        table.insert(dodgingParts, newObject)
        -- Start dodging as soon as a part is detected
        prioritizeDodging()
    end
end)

-- Function to attack the enemy rapidly
local function attackEnemy()
    local args = {
        [1] = {
            [1] = {
                ["animationLength"] = 0,
                ["sentAt"] = tick()  -- Use tick() for the current time
            },
            [2] = "C"
        }
    }
    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))
end

-- Continuous fast attack loop
coroutine.wrap(function()
    while getgenv().autofarm do
        pcall(function()
            attackEnemy()
        end)
        wait(0.05)  -- Small wait for rapid attacks
    end
end)()

-- Move behind the target and face them (using tweening for movement)
local function moveAndFaceTarget(target)
    if not humanoidRootPart or not humanoid then return end

    local targetRootPart = target:FindFirstChild("HumanoidRootPart")
    if not targetRootPart then return end

    -- Continuous loop to keep moving behind the target
    while getgenv().autofarm and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 do
        local currentDistance = (targetRootPart.Position - humanoidRootPart.Position).Magnitude

        -- Check if we're far enough away to move
        if currentDistance > 3 then
            -- Calculate the position behind the target
            local behindOffset = targetRootPart.CFrame.LookVector * -getgenv().distanceBehind
            local targetPosition = targetRootPart.Position + behindOffset

            -- Create a CFrame to move to behind the enemy and look at the target
            local targetCFrame = CFrame.new(targetPosition, targetRootPart.Position)

            -- Tween movement towards the target
            local tweenDuration = 2 / math.max(0.1, getgenv().tweenSpeed)  -- Adjust tween duration based on tweenSpeed
            local tweenInfo = TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            stopTween()  -- Stop any ongoing tweens before starting a new one
            currentTween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
            currentTween:Play()

            -- Wait for tween to complete
            wait(tweenDuration)
        else
            wait(0.1)
        end
    end
end

-- Wait until the enemy is dead
local function waitForEnemyToDie(enemy)
    local enemyHumanoid = enemy:FindFirstChild("Humanoid")
    if enemyHumanoid then
        while enemyHumanoid.Health > 0 and getgenv().autofarm do
            wait(0.1)
        end
    end
end

-- Find all enemies in the dungeon folder
local function findEnemies()
    local enemies = {}
    local dungeonFolder = Workspace:FindFirstChild("dungeon")
    if not dungeonFolder then return enemies end

    for _, obj in pairs(dungeonFolder:GetDescendants()) do
        if obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") and obj.Humanoid.Health > 0 then
            table.insert(enemies, obj)
        end
    end

    return enemies
end

-- Auto-farming logic (manages enemy targeting and dodging)
local function autoFarm()
    while getgenv().autofarm do
        local enemies = findEnemies()

        if #enemies > 0 then
            for _, enemy in pairs(enemies) do
                if not getgenv().autofarm then return end

                -- Start dodging in parallel while attacking and moving to target
                coroutine.wrap(function()
                    constantlyCheckForDodging()
                end)()

                -- Move behind the enemy and face them
                moveAndFaceTarget(enemy)

                -- Wait for the enemy to die
                waitForEnemyToDie(enemy)
            end
        end

        wait(getgenv().enemyCheckFrequency)  -- Throttled enemy checking to reduce load
    end
end

-- Start autofarming if enabled
if getgenv().autofarm then
    coroutine.wrap(function()
        pcall(function()
            autoFarm()
        end)
    end)()
end
