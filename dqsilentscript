-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Variables to store character components
local humanoidRootPart, humanoid
local dodgingParts = {}  -- Store parts that require dodging

-- Function to initialize character components after respawn
local function initializeCharacter(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

-- Ensure the script continues after respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    initializeCharacter(character)
end)

-- Initialize character if already loaded
if LocalPlayer.Character then
    initializeCharacter(LocalPlayer.Character)
end

-- Function to calculate the position behind and above the target at a fixed angle
local function getFixedPositionBehindTarget(targetRootPart)
    local behindOffset = targetRootPart.CFrame.LookVector * -getgenv().distanceBehind
    local aboveOffset = Vector3.new(0, getgenv().heightAbove, 0)
    local targetPosition = targetRootPart.Position + behindOffset + aboveOffset

    -- Return a CFrame that positions the character and makes it look at the target
    local fixedAngleCFrame = CFrame.new(targetPosition, targetRootPart.Position)
    return fixedAngleCFrame
end

-- Function to move the character behind the target at a fixed position and angle (initial movement)
local function moveAndStayBehindTarget(target)
    if not humanoidRootPart or not humanoid then return end
    local targetRootPart = target:FindFirstChild("HumanoidRootPart")
    if not targetRootPart then return end

    -- Move to the fixed position behind and above the target and face the target
    local fixedPosition = getFixedPositionBehindTarget(targetRootPart)

    -- Move the character to the desired position (one-time tweening)
    humanoidRootPart.CFrame = fixedPosition

    -- Recheck the character's position only if necessary
    coroutine.wrap(function()
        while getgenv().autofarm and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 do
            -- Ensure the character is always facing the target
            local currentPosition = getFixedPositionBehindTarget(targetRootPart)
            humanoidRootPart.CFrame = currentPosition

            wait(0.1)  -- Wait before rechecking
        end
    end)()
end

-- Function to attack the enemy rapidly
local function attackEnemy()
    local args = {
        [1] = {
            [1] = {
                ["animationLength"] = 0,
                ["sentAt"] = tick()  -- Use tick() for the current time
            },
            [2] = "C"
        }
    }
    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))
end

-- Continuous fast attack loop
coroutine.wrap(function()
    while getgenv().autofarm do
        pcall(function()
            attackEnemy()
        end)
        wait(0.05)  -- Small wait for rapid attacks
    end
end)()

-- Function to handle dodging (teleporting to safety)
local function prioritizeDodging()
    -- (Dodge logic remains as is)
end

-- Constantly check for dodging and ensure the player is always safe
local function constantlyCheckForDodging()
    while getgenv().autofarm do
        prioritizeDodging()
        wait(getgenv().dodgeCheckFrequency)  -- Frequent checks for dodging
    end
end

-- Wait until the enemy is dead
local function waitForEnemyToDie(enemy)
    local enemyHumanoid = enemy:FindFirstChild("Humanoid")
    if enemyHumanoid then
        while enemyHumanoid.Health > 0 and getgenv().autofarm do
            wait(0.1)
        end
    end
end

-- Find all enemies in the dungeon folder
local function findEnemies()
    local enemies = {}
    local dungeonFolder = Workspace:FindFirstChild("dungeon")
    if not dungeonFolder then return enemies end

    for _, obj in pairs(dungeonFolder:GetDescendants()) do
        if obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") and obj.Humanoid.Health > 0 then
            table.insert(enemies, obj)
        end
    end

    return enemies
end

-- Auto-farming logic
local function autoFarm()
    while getgenv().autofarm do
        local enemies = findEnemies()

        if #enemies > 0 then
            for _, enemy in pairs(enemies) do
                if not getgenv().autofarm then return end

                -- Start dodging in parallel while attacking and staying behind the target
                coroutine.wrap(function()
                    constantlyCheckForDodging()
                end)()

                -- Move behind the enemy and maintain the position
                moveAndStayBehindTarget(enemy)

                -- Wait for the enemy to die
                waitForEnemyToDie(enemy)
            end
        end

        wait(getgenv().enemyCheckFrequency)  -- Throttled enemy checking to reduce load
    end
end

-- Start autofarming if enabled
if getgenv().autofarm then
    coroutine.wrap(function()
        pcall(function()
            autoFarm()
        end)
    end)()
end
