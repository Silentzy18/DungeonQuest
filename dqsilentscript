-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variables to store character components
local humanoidRootPart, humanoid

-- Function to initialize character components after respawn
local function initializeCharacter(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

-- Attach to the CharacterAdded event to ensure the script continues after respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    initializeCharacter(character)
end)

-- Initialize the character if already loaded
if LocalPlayer.Character then
    initializeCharacter(LocalPlayer.Character)
end

-- Function to attack the enemy rapidly
local function attackEnemy()
    local args = {
        [1] = {
            [1] = {
                ["animationLength"] = 0,
                ["sentAt"] = tick()  -- Use tick() to get the current time
            },
            [2] = "C"
        }
    }
    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))
end

-- Continuous fast attack loop (throttled)
coroutine.wrap(function()
    while getgenv().autofarm do
        pcall(function()
            attackEnemy()
        end)
        wait(0.05)  -- Reduced attack frequency to avoid overloading the server
    end
end)()

-- Function to keep the player behind the target and always facing the target using continuous tweens
local function moveAndStayBehindTarget(target)
    if not humanoidRootPart or not humanoid then return end

    -- Check if the target is valid
    local targetRootPart = target:FindFirstChild("HumanoidRootPart")
    if not targetRootPart then return end

    -- Run a continuous loop to always stay behind the target
    while getgenv().autofarm and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 do
        -- Calculate the current distance to the target
        local currentDistance = (targetRootPart.Position - humanoidRootPart.Position).Magnitude
        
        -- Recalculate the position behind the target only if the player is far enough away
        if currentDistance > 3 then  -- Only move if farther than 3 studs (this avoids small unnecessary movements)
            -- Recalculate the position behind the target based on its LookVector (facing direction)
            local behindOffset = targetRootPart.CFrame.LookVector * -getgenv().distanceBehind
            local targetPosition = targetRootPart.Position + behindOffset

            -- Adjust height with the configured value
            targetPosition = Vector3.new(targetPosition.X, targetRootPart.Position.Y + getgenv().heightAbove, targetPosition.Z)

            -- Create a final CFrame that combines both position behind and facing the target
            local finalCFrame = CFrame.new(targetPosition, targetRootPart.Position)

            -- Use TweenService to move the player's HumanoidRootPart smoothly
            -- The tween speed is now inverted: higher speed = faster movement
            local tweenDuration = 1 / math.max(0.1, getgenv().tweenSpeed)  -- Prevent divide by zero
            local tweenInfo = TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = finalCFrame})
            tween:Play()
        end

        -- Throttle the position update loop based on distance from target (lower distance = slower update rate)
        wait(currentDistance > 10 and 0.05 or 0.1)  -- Adjust wait time dynamically based on distance
    end
end

-- Function to wait until the target's Humanoid health is 0
local function waitForEnemyToDie(enemy)
    local enemyHumanoid = enemy:FindFirstChild("Humanoid")
    if enemyHumanoid then
        -- Wait until the enemy's health reaches 0
        while enemyHumanoid.Health > 0 and getgenv().autofarm do
            wait(0.1)  -- Small delay to prevent overloading
        end
    end
end

-- Function to find all enemies in the dungeon folder (with reduced frequency)
local function findEnemies()
    local enemies = {}

    -- Get the dungeon folder
    local dungeonFolder = game.Workspace:FindFirstChild("dungeon")
    if not dungeonFolder then return enemies end  -- Return empty if dungeon folder not found

    -- Search all descendants in the dungeon folder for valid enemies
    for _, obj in pairs(dungeonFolder:GetDescendants()) do
        if obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") and obj.Humanoid.Health > 0 then
            table.insert(enemies, obj)
        end
    end

    return enemies
end

-- Function to autofarm enemies
local function autoFarm()
    local lastEnemyCheck = 0  -- Keep track of the last time we checked for enemies
    
    while getgenv().autofarm do
        -- Only check for new enemies every getgenv().enemyCheckInterval seconds
        if tick() - lastEnemyCheck >= getgenv().enemyCheckInterval then
            lastEnemyCheck = tick()  -- Update the last check time

            local enemies = findEnemies()

            -- If there are enemies, start farming them
            if #enemies > 0 then
                for _, enemy in pairs(enemies) do
                    if not getgenv().autofarm then return end  -- Stop if autofarm is disabled during the loop

                    -- Continuously move behind the target enemy using TweenService and CFrame
                    moveAndStayBehindTarget(enemy)

                    -- Wait for the enemy to die before moving to the next one
                    waitForEnemyToDie(enemy)
                end
            end
        else
            -- Wait a bit before the next loop iteration to save resources
            wait(0.5)
        end
    end
end

-- Start the autofarming script if enabled
if getgenv().autofarm then
    coroutine.wrap(function()
        pcall(function()
            autoFarm()
        end)
    end)()
end
